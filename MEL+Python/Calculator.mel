global proc float Calculator(float $input[], int $operation) // define function, requires the input and operation (assigned by a number 1-4)
{

    //checks if input is empty or operation is invalid
    if(size($input) < 2 || $operation < 1 || $operation > 4)
    {
        error("Invalid input or operation.");
        return 0.0;
    }

    float $result = 0.0; // Initializes the return result

    // Determine the operation and call subfunction
    if ($operation == 1) // Addition
    {
        $result = add($input);
        printOperation("+", $input, $result);
    }
    else if ($operation == 2) // Subtraction
    {
        $result = subtract($input);
        printOperation("-", $input, $result);
    }
    else if ($operation == 3) // Multiplication
    {
        $result = multiply($input);
        printOperation("*", $input, $result);
    }
    else if ($operation == 4) // Division
    {
        $result = divide($input);
        printOperation("/", $input, $result);
    }

    return $result;
}

// Subfunction for addition
proc float add(float $values[])
{
    float $sum = 0.0; // Starting sum is 0
    for ($value in $values) // Goes through array and adds together
    {
        $sum += $value;
    }
    return $sum;
}

// Subfunction for subtraction
proc float subtract(float $values[])
{
    float $result = $values[0]; // Starts the code off with the first input in the array
    for ($i = 1; $i < size($values); $i++) // Loops through the rest of the array and subracts in order
    {
        $result -= $values[$i];
    }

    return $result;
}

// Subfunction for multiplication
proc float multiply(float $values[])
{
    float $result = 1.0; // Initial number set to 1 because multiplying by 1 doesn't change the value
    for ($value in $values)
    {
        $result *= $value;
    }
    
    return $result;
}

// Subfunction for division
proc float DistributeUVsDistancePresets(float $values[])
{
    float $result = $values[0];
    for ($i = 1; $i < size($values); $i++)
    {
        if ($values[$i] == 0) // Make sure you can't divide by zero
        {
            error("Division by zero.");
            return 0.0;
        }

        $result /= $values[$i];
    }

    return $result;
}

// Subfunction to print the results of the operations 
proc printOperation(string $operator, float $values[], float $result)
{
    string $operationString = "";

    for ($i = 0; $i < size($values); $i++)
    {
        $operationString += ($i = 0) ? $values[$i] : (" " + $operator + " " + $values[$i]);
    }

    print("The " + $operationString + " = " + $result);
}

float $input[] = {1.0, 2.0}; // insert desired numbers into calculator
int $operation = 1; // choose operation: 1 = Addition, 2 = Subtraction, 3 = Multiplication, 4 = Division
float $result = Calculator($input, $operation);